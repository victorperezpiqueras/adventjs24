"""
춰Es hora de poner el 치rbol de Navidad en casa! 游꾻 Pero este a침o queremos que sea especial. Vamos a crear una funci칩n que recibe la altura del 치rbol (un entero positivo entre 1 y 100) y un car치cter especial para decorarlo.

La funci칩n debe devolver un string que represente el 치rbol de Navidad, construido de la siguiente manera:

    El 치rbol est치 compuesto de tri치ngulos de caracteres especiales.
    Los espacios en blanco a los lados del 치rbol se representan con guiones bajos _.
    Todos los 치rboles tienen un tronco de dos l칤neas, representado por el car치cter #.
    El 치rbol siempre debe tener la misma longitud por cada lado.
    Debes asegurarte de que el 치rbol tenga la forma correcta usando saltos de l칤nea \n para cada l칤nea.

Ejemplos:

const tree = createXmasTree(5, '*')
console.log(tree)
/*
____*____
___***___
__*****__
_*******_
*********
____#____
____#____
*/

const tree2 = createXmasTree(3, '+')
console.log(tree2)
/*
__+__
_+++_
+++++
__#__
__#__
*/

const tree3 = createXmasTree(6, '@')
console.log(tree3)
/*
_____@_____
____@@@____
___@@@@@___
__@@@@@@@__
_@@@@@@@@@_
@@@@@@@@@@@
_____#_____
_____#_____
*/

Aseg칰rate de utilizar saltos de l칤nea \n al final de cada l칤nea, excepto en la 칰ltima.
"""


def createXmasTree(height, ornament):
    tree = []
    decorations = 1  # starts with one
    # every level grows 2 horizontally, plus 1 for log
    total_w = (2 * height) - 1

    for h in range(1, height+1):
        num_spaces = total_w - decorations  # odd - odd = always even
        spaces = "_" * (num_spaces // 2)

        curr_w = (2 * h) - 1
        decoration = ornament * curr_w
        tree.append(f"{spaces}{decoration}{spaces}")
        decorations += 2

    last_spaces = "_" * ((total_w - 1) // 2)
    tree.append(f"{last_spaces}#{last_spaces}")
    tree.append(f"{last_spaces}#{last_spaces}")
    return "\n".join(tree)


print(createXmasTree(5, "*"))
