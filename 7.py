"""
Â¡El grinch ðŸ‘¹ ha pasado por el taller de Santa Claus! Y menudo desastre ha montado. Ha cambiado el orden de algunos paquetes, por lo que los envÃ­os no se pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patrÃ³n que ha seguido el grinch para desordenarlos. Nos ha escrito las reglas que debemos seguir para reordenar los paquetes. Las instrucciones que siguen son:

    RecibirÃ¡s un string que contiene letras y parÃ©ntesis.
    Cada vez que encuentres un par de parÃ©ntesis, debes voltear el contenido dentro de ellos.
    Si hay parÃ©ntesis anidados, resuelve primero los mÃ¡s internos.
    Devuelve el string resultante con los parÃ©ntesis eliminados, pero con el contenido volteado correctamente.

Nos ha dejado algunos ejemplos:

fixPackages('a(cb)de')
// âžž "abcde"
// Volteamos "cb" dentro de los parÃ©ntesis

fixPackages('a(bc(def)g)h')
// âžž "agdefcbh"
// 1Âº volteamos "def" â†’ "fed", luego volteamos "bcfedg" â†’ "gdefcb"

fixPackages('abc(def(gh)i)jk')
// âžž "abcighfedjk"
// 1Âº volteamos "gh" â†’ "hg", luego "defhgi" â†’ "ighfed"

fixPackages('a(b(c))e')
// âžž "acbe"
// 1Âº volteamos "c" â†’ "c", luego "bc" â†’ "cb"
"""


def fix_packages(packages):
    # recursion works locally but timeouts after 1000ms in remote
    return_package = ''
    i = 0
    while i < len(packages):
        char = packages[i]
        if char == '(':
            closing_bracket_index = len(
                packages) - 1 - packages[::-1].find(')')
            fixed_packages_brackets = fix_packages(
                packages[i+1: closing_bracket_index])
            return_package += fixed_packages_brackets[::-1]
            i = closing_bracket_index + 1
        else:
            return_package += char
            i += 1

    return return_package


print(fix_packages('abc(def(gh)i)jk'))
